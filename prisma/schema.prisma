generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or sqlite/mysql depending on your use
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique // Clerk user ID
  name      String
  email     String    @unique
  gigs      Gig[]
  contacts  Contact[]
  createdAt DateTime  @default(now())
  Task      Task[]
  deals     Deal[]
  updatedAt DateTime @updatedAt @default(now())
  services  Service[]
  notes     Note[] // optional, if the user has notes
}

model Gig {
  id        String    @id @default(uuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  contacts  Contact[] @relation("GigContacts")
  deals     Deal[]
  createdAt DateTime  @default(now())
  Task      Task[]
  updatedAt DateTime  @updatedAt
  description String?
  services  Service[] @relation("GigServices")
  
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  userId    String
  // image url is optional
  imageUrl  String?
  status    LeadStatus   @default(NEW) 
  user      User     @relation(fields: [userId], references: [id])
  gigs      Gig[]    @relation("GigContacts")
  tags      Tag[]    @relation("ContactTags")
  createdAt DateTime @default(now())
  tasks      Task[]
  updatedAt DateTime @updatedAt @default(now())
  deals     Deal[]   @relation("ContactDeals")
  notes     Note[] // optional, if the contact has notes
}

model Deal {
  id        String     @id @default(uuid())
  title     String
  amount    Float
  status    DealStatus
  gigId     String?
  gig       Gig?        @relation(fields: [gigId], references: [id])
  createdAt DateTime   @default(now())
  tasks      Task[]
  updatedAt DateTime @updatedAt @default(now())
  contacts Contact[] @relation("ContactDeals")
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  tags     Tag[]    @relation("TagDeals")
  closeDate DateTime? // optional, when the deal was closed
  notes    Note[] // optional, if the deal has notes
}

model Service {
  id        String    @id @default(uuid())
  name      String
  description String?
  price     Float
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  gigs      Gig[]     @relation("GigServices")
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Note {
  id        String    @id @default(uuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  contactId String? // optional, if the note is related to a contact
  contact   Contact? @relation(fields: [contactId], references: [id])
  dealId    String? // optional, if the note is related to a deal
  deal      Deal?   @relation(fields: [dealId], references: [id])
  taskId    String? // optional, if the note is related to a task
  task      Task?   @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  contacts Contact[] @relation("ContactTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  deals    Deal[]   @relation("TagDeals")
}

model Task {
  id      String     @id @default(uuid())
  title   String

  description String?
  priority Int @default(1) // 1 is low, 2 is medium, 3 is high
  startDate DateTime? // optional, when the task starts
  dueDate DateTime?

  status  TaskStatus @default(TO_DO)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  contacts Contact[] 

  gigId String? // optional
  gig   Gig?    @relation(fields: [gigId], references: [id])

  dealId String? // optional
  deal   Deal?   @relation(fields: [dealId], references: [id])
  notes   Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum DealStatus {
  PENDING
  WON
  LOST
  CANCELLED
  NEGOTIATION
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  CONVERTED
  HOT
  COLD
}